#+TITLE: OpenPGP
#+POSTID: 106
#+DATE: [2009-09-04 Fri 12:52]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: cryptography
#+TAGS: cryptography, openpgp, pgp

One of the nice aspects of my current occupation is that I can type [[http://en.wikipedia.org/wiki/OpenPGP#OpenPGP][OpenPGP]] into [[http://springerlink.com/content/?k=OpenPGP][springerlink]]'s and [[http://scholar.google.co.uk/scholar?q=OpenPGP][Google Scholar]]'s search boxes and claim that reading every paper I deem interesting is “work”. OpenPGP is the standard which is implemented by programs like [[http://www.gnupg.org/][GnuPG]] and PGP for e-mail encryption and digital signatures. The reason I became curious is because I wanted to implement something like an OpenPGP encrypted wiki or filesystem for multiple users.

-  *[[http://www.ietf.org/rfc/rfc4880.txt][RFC 4880]]* is the current revision of the OpenPGP message format standard, addressing some of the security concerns mentioned below. It replaces [[http://www.ietf.org/rfc/rfc1991.txt][RFC 1991]] and [[http://www.ietf.org/rfc/rfc2440.txt][RFC 2440]]. You have to admire that they got their hands on 4880 to replace 2440.
-  *[[http://www.springerlink.com/content/kabnt5qpdgrv7c6g/][Can We Trust Cryptographic Software? Cryptographic Flaws in GNU Privacy Guard v1.2.3]]* by Phong Nguyen describes a few errors made in the GnuPG implementation of the OpenPGP standard. In particular some parameters used in ElGamal encryption were chosen to be small for performance reasons which allowed lattice-based attacks. Lattice-based attacks on small parameters in public-key cryptography are not new, another [[http://wiki.sagemath.org/sage-2.11][example]] is textbook RSA with say 512-bit modulus encrypting a DES 56-bit key. From the paper: “If a proprietary software claims to implement 2048-bit RSA and 128-bit AES, it does not say much about the actual cryptographic security: which RSA is being used? Could it be textbook RSA (with zero-padding) encrypting a 128-bit AES key with public exponent 3? ... Open source software thus sounds like a good solution. However, the fact that a source code can be read does not necessarily imply that it is actually read, especially by cryptography experts.” The flaw was rather serious (one package was sufficient to compute the private key) but the required configuration fortunately not very wide-spread since it was never the default choice. The particular option was removed from GnuPG since then.
-  *[[http://springerlink.com/content/m60212001x954772/][An Attack on CFB Mode Encryption as Used by OpenPGP]]* by Serge Mister and Robert Zuccherato describes an attack on the ad-hoc modification of [[http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29][CFB mode]]. PGP does not use variable IVs but instead encrypts a random block first and then two bytes which repeat two bytes from the first block. This redundancy provides a “quick check” whether the correct symmetric key was used for decryption or not. This also instantiates an integrity-check oracle if the information whether decryption passed this test or not is made available to the attacker. She can use this oracle to decrypt two bytes from any ciphertext block. The setup costs $2\^{15}$ oracle queries and each block also costs $2\^{15}$ oracle queries on average. RFC4880 discourages the use of this “quick check” and I think GnuPG avoids it.
-  *[[http://springerlink.com/content/4yxg1g7jttn4ywbn/][Adaptive-CCA on OpenPGP Revisited]]* by Hsi-Chung Lin, Sung-Ming Yen and Guan-Ting Chen does what the title implies. It revisits older adaptive CCA attacks and evaluates their applicability to RFC2440, also some new adaptive CCA attacks with weaker assumptions are proposed. All these attacks should not apply against RFC4880 anymore.
-  *[[http://springerlink.com/content/x587847626m06014/][Privacy in Encrypted Content Distribution Using Private Broadcast Encryption]]* by Adam Barth, Dan Boneh and Brent Waters is not really about OpenPGP. The authors construct a system where content is distributed in encrypted form but no one can tell who is a recipient not even other recipients: private broadcast encryption. OpenPGP does not provide this feature, as pointed out in the paper. While it allows to remove the explicit tag for which key a packet is encrypted, it chooses random Diffie-Hellmann groups for each key and thus still allows to break privacy (by distinguishing groups). While this could easily be fixed too, the authors also consider active attacks where an attacker modifies an encrypted message for Alice to contain the text “please visit the following URL for free music” (that really is their example!). The attacker then waits for Alice to click on the link which can only happen if she could decrypt the original message.

The bottom line is that OpenPGP features some ad-hoc cryptography which is not up to the standards of the cryptography research community. For example, OpenPGP is most definitely not secure against chosen-ciphertext attacks ([[http://en.wikipedia.org/wiki/Chosen-ciphertext_attack][CCA]]). This is likely not an issue for e-mail security where a human being enters passphrases to unlock private keys and where reports of errors are not relayed to a potential attacker. However, for instance a server which automatically decrypts messages and acts based on the content of the cleartext is a whole different story ... and so is my OpenPGP encrypted wiki thingy.

*PS:* I will be at the ECRYPT-II [[http://www.ecrypt.eu.org/openreview.html][Workshop on Cryptology: Progress and Challenges]] in Leuven in two weeks.



