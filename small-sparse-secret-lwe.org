#+BLOG: martinralbrecht
#+POSTID: 1386
#+TITLE: On dual lattice attacks against small-secret LWE and parameter choices in HElib and SEAL
#+DATE: [2017-01-21 Sat 10:58]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: cryptography, sage
#+TAGS: lwe, lattice-based cryptography, sage, cryptography, fhe, homomorphic encryption
#+DESCRIPTION:

My [[https://eprint.iacr.org/2017/047][paper]] on solving small, sparse secret instances is now on ePrint. Here's the abstract:

#+BEGIN_QUOTE
We present novel variants of the dual-lattice attack against LWE in the presence of an unusually short secret. These variants are informed by recent progress in BKW-style algorithms for solving LWE. Applying them to parameter sets suggested by the homomorphic encryption libraries HElib and SEAL yields revised security estimates. Our techniques scale the exponent of the dual-lattice attack by a factor of \((2\,L)/(2\,L+1)\) when \(\log q = \Theta{\left(L \log n\right)}\), when the secret has constant hamming weight \(h\) and where \(L\) is the maximum depth of supported circuits. They also allow to half the dimension of the lattice under consideration at a multiplicative cost of \(2^{h}\) operations. Moreover, our techniques yield revised concrete security estimates. For example, both libraries promise 80 bits of security for LWE instances with $n=1024$ and $\log_2 q \approx {47}$, while the techniques described in this work lead to estimated costs of 68 bits (SEAL) and 62 bits (HElib).
#+END_QUOTE

If you want to see what its effect would be on your favourite small, sparse secret instance of LWE, the code for estimating the running time is included in our [[https://bitbucket.org/malb/lwe-estimator/][LWE estimator]]. The integration into the main function =estimate_lwe= is imperfect, though. To get you started, here's the code used to produce the estimates for the rolling example in the paper.

- Our instance's secret has hamming weight $h=64$ and a ternary secret. We always use sieving as the SVP oracle in BKZ:

  #+BEGIN_SRC python
sage: n, alpha, q = fhe_params(n=2048, L=2)
sage: kwds = {"optimisation_target": "sieve", "h":64, "secret_bounds":(-1,1)}
  #+END_SRC

- We establish a base line:

  #+BEGIN_SRC python
sage: print cost_str(sis(n, alpha, q, optimisation_target="sieve"))
  #+END_SRC

- We run the scaled normal form approach from Section 4 and enable amortising costs from Section 3 by setting =use_lll=True=:

  #+BEGIN_SRC python
sage: print cost_str(sis_small_secret_mod_switch(n, alpha, q, use_lll=True, **kwds))
  #+END_SRC

- We run the approach from Section 5 for sparse secrets. Setting =postprocess=True= enables the search for solutions $\mathbf{s}_1$ with very low hamming weight (page 17):

  #+BEGIN_SRC python
sage: print cost_str(drop_and_solve(sis, n, alpha, q, postprocess=True, **kwds))
  #+END_SRC

- We combine everything:

#+BEGIN_SRC python
sage: f = sis_small_secret_mod_switch
sage: print cost_str(drop_and_solve(f, n, alpha, q, postprocess=True, **kwds))
#+END_SRC
